<?php
$fid_photo = -1;
$fid_media = -1;
require_once "ourmedia.php";

/**
 * Implementation of hook_help().
 */
function videomedia_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Enables users to publish video.');
    case 'node/add#text':
      return t("Publish a video and enter all other metadata information about it.");
  }
}

/**
 * Implementation of hook_node_name().
 */
function videomedia_node_name($node) {
  return t('video');
}
 
/**
 * Implementation of hook_perm().
 */
function videomedia_perm() {
  return array('publish video', 'edit own video');
}

/**
 * Implementation of hook_access().
 */
function videomedia_access($op, $node) {
  global $user;
  if ($op == 'create') {
    return user_access('publish video');
  }

  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own video') && ($user->uid == $node->uid)) {
      return TRUE;
    }
  }
}
 
/**
 * Implementation of hook_link().
 */
function videomedia_link($type, $node = 0, $main) {
  $links = array();
  if ($type == 'node' && $node->type == 'videomedia') {
    // Don't display a redundant edit link if they are node administrators.
    if (videomedia_access('update', $node) && !user_access('administer nodes')) {
      $links[] = l(t('edit this video'), "node/$node->nid/edit");
    }
  }
  return $links;
}

/**
 * Implementation of hook_menu().
 */
function videomedia_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array('path' => 'node/add/videomedia', 'title' => t('video'),
      'access' => videomedia_access('create', NULL));
  }
  return $items;
}

/**
 * Implementation of hook_validate().
 */
function videomedia_validate($node) {
  return ourmedia_validate($node,'videomedia');
}

/**
 * Implementation of hook_nodeapi().
 */
function videomedia_nodeapi($node, $op, $arg) {
  return ourmedia_nodeapi($node, $op, 'videomedia');
}

/**
 * specifies the valid video files
 */


function get_supported_filemime() {
  return array(
    'video/quicktime',
    'video/x-msvideo',
    'video/avi',
    'video/msvideo',
    'video/mpeg',
    'video/x-ms-wmv'
  );
}


/**
 * Validates the video url
 */
function validate_video_url($node, $fileid_type) {
  return validate_url($node, $fileid_type,'videomedia'); 
}

/**
 * Implementation of hook_form().
 */
function videomedia_form(&$node, &$param) {
  return  ourmedia_mediaform(&$node, &$param , 'videomedia');
}

/**
 * Generates video fields values
*/
function get_video_field_value($node, $field) {
  return get_ourmedia_field_value($node, $field,'videomedia'); 
}

/**
 * Generates video specific fields
 */
function get_video_specific_fields($node) {
  return get_ourmedia_specific_fields($node,'videomedia');
}

/**
 * Generates video taxonomy
 */
function get_video_taxonomy_node_form($node = '', $help = NULL, $name = 'taxonomy') {
  return get_ourmedia_taxonomy_node_form($node = '', $help = NULL, $name = 'taxonomy'); 
}

/**
 * Implementation of hook_content().
 */
function videomedia_content($node, $main = 0) {
  return node_prepare($node, $main);
}

/**
 * Implementation of hook_load().
 */
function videomedia_load($node) {
  global $fid_video;
  global $fid_photo;
  $output = array();
  $result = db_query("SELECT * FROM {video} where nid = %d", $node->nid);
  if($result) {
    $output = db_fetch_object($result);
    $fid_video = $output->video_fileid;
    $fid_photo = $output->photo_fileid;
    $output->videourl = '';
    $output->photourl = '';
    $videourl_result = db_query("SELECT filepath from {files} where fid = %d", $output->video_fileid);
    if($videourl_result && db_num_rows($videourl_result) > 0) {
      $output->videourl = file_create_url(db_result($videourl_result));
    }
    $photo_result = db_query("SELECT filepath from {files} where fid = %d", $output->photo_fileid);
    if($photo_result && db_num_rows($photo_result) > 0) {
      $output->photourl = file_create_url(db_result($photo_result));
    }
  }
 $returns = array('video' => $output);
 return $returns;
}

/**
 * Implementation of hook_view()
 */
function videomedia_view(&$node, $teaser) {
  return ourmedia_view(&$node, $teaser,'videomedia'); 
}

/**
 * Generates theme for the page
 */
function theme_video_view($node, $video_data, $video_metadata, $video_taxonomy) {
  $output =  theme_ourmedia_view($node, $video_data, $video_metadata, $media_taxonomy,'videomedia');
  $output = theme('box', 'Video', $output);
  if(isset($video_metadata)) {
    foreach($video_metadata as $video_fields) {
      if($video_fields) {
        $output_metadata .= "<div><b>" . $video_fields['title'] . "</b>: " . $video_fields['value'] ."</div>";
      }
    }
    $output .= theme('box', 'Other Metadata', $output_metadata);
  }
return $output;
}

/**
* Display video
 */
function show_video($video_fields_all) {
  $mediaURL = $video_fields_all->videourl;
  $extension = '';
  $parts = split('\.', $mediaURL);
  
  if (count($parts) > 1) $extension = end($parts);
  if (!$extension && count($parts) > 2) $ext = prev($parts);
  $extension = strtolower($extension);
  if ($extension == "mov") {
    $quicktime_autoplay = $video_fields_all->quicktime_autoplay ? "true" : "false";
    $quicktime_controller = $video_fields_all->quicktime_controller ? "false" : "true";
    $quicktime_loop = $video_fields_all->quicktime_loop ? "true" : "false";
	  $output = "<embed PLUGINSPAGE=\"http://www.apple.com/quicktime/download/\" src=\"$mediaURL\" QTSRC=\"$mediaURL\" width=\"320\" height=\"260\" autoplay=\"$quicktime_autoplay\" controller=\"$quicktime_controller\" loop=\"$quicktime_loop\" enablejavascript=\"true\"></embed>";
	}
  if ($extension == "avi") {
	  $output = "<EMBED type=\"application/x-mplayer2\" pluginspage=\"http://microsoft.com/windows/mediaplayer/en/download/\" id=\"mediaPlayer\" name=\"mediaPlayer\" displaysize=\"4\" autosize=\"-1\" bgcolor=\"darkblue\" showcontrols=\"true\" showtracker=\"-1\" showdisplay=\"0\" showstatusbar=\"-1\" videoborder3d=\"-1\" width=\"285\" height=\"270\" src=\"$mediaURL\" autostart=\"true\" designtimesp=\"5311\ loop=\"true\"></EMBED>";
  }

  if ($extension == "mpeg" || $extension == "mpg") {
	  $output = "<embed PLUGINSPAGE=\"http://www.apple.com/quicktime/download/\" src=\"$mediaURL\" QTSRC=\"$mediaURL\" width=\"320\" height=\"260\" autoplay=\"true\" controller=\"true\" enablejavascript=\"true\"></embed>";
  }
	else if ($extension == "wmv") {
    $output = "<embed src=\"$mediaURL\" width=320 height=270 autoplay=false controller=true enablejavascript=true></embed>";
  }
  if ($extension == "flv") {
    $output = <<<ENDOFPLAYER
	<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=7,0,0,0" width="320" height="268" id="320x268_v6" align="middle" wmode="transparent">
<param name="allowScriptAccess" value="sameDomain" />
<param name="movie" value="sites/ourmedia.org/files/flash/flvplayer.swf?file=$mediaURL&autoStart=false" />
<param name="quality" value="high" />
<param name="wmode" value="transparent" />
<embed src="sites/ourmedia.org/files/flash/flvplayer.swf?file=$mediaURL&autoStart=false" swliveconnect="true" quality="high" width="320" height="268" name="320x268_v6" align="middle" allowScriptAccess="sameDomain" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" /></embed>
      </object>
ENDOFPLAYER;
  }
  if ($extension == "swf") {
    $output = "<OBJECT classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0\" width=\"320\" height=\"240\"> <param name=\"movie\" value=\"$mediaURL\"> <param name=\"quality\" value=\"high\"><param name=\"bgcolor\" value=\"#FFFFFF\"> <param name=\"loop\" value=\"true\">  <EMBED src=\"$mediaURL\" quality=\"high\" bgcolor=\"#FFFFFF\" width=\"320\" height=\"240\" loop=\"true\" type=\"application/x-shockwave-flash\"  pluginspage=\"http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash\"></EMBED></OBJECT>";
  }
  if ($extension == "mp4") {
    $output = "<OBJECT CLASSID=\"clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B\" CODEBASE=\"http://www.apple.com/qtactivex/qtplugin.cab\" WIDTH=\"320\" HEIGHT=\"260\" ><PARAM NAME=\"src\" VALUE=\"$mediaURL\"><PARAM NAME=\"autoplay\" VALUE=\"false\" ><EMBED  SRC=\"QTMimeType.pntg\" TYPE=\"image/x-macpaint\" PLUGINSPAGE=\"http://www.apple.com/quicktime/download\" QTSRC=\"$mediaURL\" WIDTH=\"320\" HEIGHT=\"256\" AUTOPLAY=\"false\"></EMBED></OBJECT>";
  }
  if ($extension == "divx") {
	  $output = "<object classid=\"clsid:67DABFBF-D0AB-41fa-9C46-CC0F21721616\" width=\"320\" height=\"212\" codebase=\"http://go.divx.com/plugin/DivXBrowserPlugin.cab\"><param name=\"src\" value=\"$mediaURL\" /><param name=\"autoPlay\" value=\"false\"><embed type=\"video/divx\" src=\"$mediaURL\" autoPlay=\"false\" width=\"320\" height=\"212\" pluginspage=\"http://go.divx.com/plugin/download/\"></embed></object>";
  }
  return $output;
}

/**
 * Implementation of hook_insert().
*/
function videomedia_insert($node) {
  return ourmedia_insert($node,'videomedia');
} 

/**
 * Implementation of hook_update().
*/
function videomedia_update($node) {
  return ourmedia_update($node,'videomedia');
}

/**
 * Implementation of hook_delete().
 */
function videomedia_delete($node) {
  db_query('DELETE FROM {video} WHERE nid = %d', $node->nid);
}
?>
