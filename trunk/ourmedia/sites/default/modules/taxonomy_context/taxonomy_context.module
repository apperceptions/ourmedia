<?php
// $Id: taxonomy_context.module,v 1.36.2.1 2005/06/16 02:48:42 nedjo Exp $

/**
 * Implementation of hook_menu()
 * Set breadcrumb, and show some infos about terms, subterms
 */
function taxonomy_context_menu($may_cache) {
  $mode = arg(0);
  $paged = !empty($_GET["from"]);
  if (!$may_cache) {
    static $taxonomy_context_css_inserted = FALSE;
    if (variable_get("taxonomy_context_use_style", 1) && !$taxonomy_context_css_inserted) {
      drupal_set_html_head('<style type="text/css" media="all">@import "modules/taxonomy_context/taxonomy_context.css";</style>');
      $taxonomy_context_css_inserted = TRUE;
    }
    if (($mode == "node") && (arg(1)>0)) {
       $node = node_load(array("nid" => arg(1)));
       $node_type = $node->type;
    }
    $context = taxonomy_context_get_context();
    $context_types = variable_get('taxonomy_context_breadcrumb_node_types', array('story', 'page', 'poll'));
    if ( ($mode == "taxonomy") || (is_numeric(array_search($node_type, $context_types))) ) {
      drupal_set_breadcrumb(taxonomy_context_get_breadcrumb($context->tid, $mode));
    }
  }
}

/**
 * Return context of the requested page
 */
function taxonomy_context_get_context() {
  static $context;
  if (!isset($context)) {
    $context = array("tid" => null, "root_tid" => null, "nid" => null, "vid" => null);
    $mode = arg(0);
    switch ($mode) {
      case "taxonomy":
        if (arg(2) == "vocab") {
          $context["tid"] = 0;
          $context["root_tid"] = 0;
          $context["vid"] = ((int)arg(3)) ? arg(3) : 1;
        } else if (arg(1) == "term") {
          $tidcurrs = preg_split('/[+ ,]/', arg(2));
          $context["tid"] = $tidcurrs[0];
          $context["root_tid"] = taxonomy_context_get_top_parent($context["tid"]);
          $context["vid"] = taxonomy_context_get_term_vocab($context["tid"]);
        }
        break;
      case "node":
        if (arg(2) == null) {
          $context["nid"] = arg(1);
          $tidscurr = taxonomy_node_get_terms(arg(1));
          foreach ($tidscurr as $tidcurr) {
            $context["tid"] = $tidcurr->tid;
            break;
          }
          $context["root_tid"] = taxonomy_context_get_top_parent($context["tid"]);
          $context["vid"] = taxonomy_context_get_term_vocab($context["tid"]);
        }
        break;
      default:
        break;
    }
    $context = array2object($context);
  }
  return $context;
}

/**
 * Return the top parent term's id of the given taxonomy term
 */
function taxonomy_context_get_top_parent($tid) {
  $query = "SELECT parent FROM {term_hierarchy} WHERE tid = %d";
  $result = db_query($query, $tid);
  while ($parent = db_fetch_object($result)) {
    if ($parent->parent == 0) {
      return $tid;
    }
    else {
      $result = db_query($query, $tid = $parent->parent);
    }
  }
}

/**
 * Return the id of the vocabulary containing the given term
 */
function taxonomy_context_get_term_vocab($tid) {
  $vid = null;
  $result = db_query("SELECT vid FROM {term_data} WHERE tid = %d", $tid);
  while ($term = db_fetch_object($result)) {
    $vid = $term->vid;
  }
  return $vid;
}

/**
 * Return the breadcrumb of taxonomy terms ending with $tid
 */
function taxonomy_context_get_breadcrumb($tid, $mode) {
  $breadcrumb[] = l(t("Home"), "");

  if (module_exist("vocabulary_list")) {
    $vid = taxonomy_context_get_term_vocab($tid);
    $vocab = taxonomy_get_vocabulary($vid);
    $breadcrumb[] = l($vocab->name, "taxonomy/page/vocab/$vid");
  }

  if ($tid) {
    $parents = taxonomy_get_parents_all($tid);
    if ($parents) {
      $parents = array_reverse($parents);
      foreach ($parents as $p) {
        if ($mode != "taxonomy" || $p->tid != $tid) {
          $breadcrumb[] = l($p->name, "taxonomy/term/$p->tid");
        }
      }
    }
  }
  return $breadcrumb;
}

/**
 * Return themed output of some infos about the given term
 *
 * @param $tid
 *   The term id
 * @param $paged
 *   Is the content split into more pages
 *
 * @return
 *   Themed output of administering links and term image
 */
function taxonomy_context_show_term($tid, $paged = false) {
  $term = taxonomy_get_term($tid);
  $term->title = $term->name; // for compatibility with node_image.module
  if (!$paged) {
    $image = taxonomy_context_get_img($term, "term", "full");
    $links = array();
    if (user_access("administer taxonomy")) {
       $links[] = l(t("administer"), "admin/taxonomy/edit/term/$term->tid", array("title" => t("Administer this term.")));
    }
    if (module_exist("node_image") && user_access("create node and term images")) {
      if (!node_image_file_exists($term->tid, "term", "full")) {
        $links[] = l(t("add images"), "node_image/add/term/$term->tid", array("title" => t("Add images for this term.")));
      }
      else {
        $links[] = l(t("replace images"), "node_image/add/term/$term->tid", array("title" => t("Replace images for this term.")));
      }
    }
    $term->image = $image;
    $term->links = $links;
    return theme("taxonomy_context_term", $term);
  }
}

/**
 * Return themed output of some infos about the child terms
 * of the given term
 *
 * @param $tid
 *   The term id
 *
 * @return
 *   Themed output of administering links and term images of subterms
 */
function taxonomy_context_show_subterms($tid, $vid = 0) {
  $terms = taxonomy_context_get_subterms($tid, $vid);
  $output = "";
  if (!(empty($terms))) {
    $output .= "<div class=\"clearit\"></div>\n";
    foreach ($terms as $term) {
      $links = array();
      if (user_access("administer taxonomy")) {
         $links[] = l(t("administer"), "admin/taxonomy/edit/term/$term->tid", array("title" => t("Administer this term.")));
      }
      if (module_exist("node_image") && user_access("create node and term images")) {
        if (!node_image_file_exists($term->tid,"term","full")) {
          $links[] = l(t("add images"), "node_image/add/term/$term->tid", array("title" => t("Add images for this term.")));
        }
        else {
          $links[] = l(t("replace images"), "node_image/add/term/$term->tid", array("title" => t("Replace images for this term.")));
        }
      }
      $term->links = $links;
      $output .= theme("taxonomy_context_term", $term, "subterm");
    }
  }
  return $output;
}

/**
 * Return subterms of the given term
 *
 * @return
 *   An array of objects representing the children terms
 */
function taxonomy_context_get_subterms($tid, $vid = 0) {
  $terms = taxonomy_get_children($tid, $vid);
  foreach ($terms as $term) {
    $term->title = $term->name; // for compatibility with node_image.module
    $term->image = taxonomy_context_get_img($term, "term", "summ");
    $term->description = node_teaser($term->description);
  }
  return $terms;
}

/**
 * Return image associated with the term if node_image.module is loaded
 *
 * @param $term
 *   The term object
 * @param $type
 *   Type of the object image, in this case should be "term"
 * @param $format
 *   Format of the image "full" for full image, "summ" for thumbnail
 *   with link to the term
 *
 * @return
 *   html code for inserting the image into the body in the required form
 */
function taxonomy_context_get_img($term, $type, $format) {
  if(module_exist("node_image")) {
    return node_image_get_image($term, $type, $format);
  }
  else {
    return "";
  }
}

/**
 * Return the trimmed version of the body
 */
function taxonomy_context_get_teaser($body) {
  $size = variable_get('teaser_length', 600);

  /*
  ** If the size is zero, teasers are disabled so we
  ** return the entire body.
  */
  if ($size == 0) {
    return $body;
  }

  /*
  ** If a valid delimiter has been specified, use it to
  ** chop of the teaser.  The delimiter can be outside
  ** the allowed range but no more than a factor two.
  */
  $delimiter = strpos($body, "<!--break-->");
  if ($delimiter > 0) {
    return substr($body, 0, $delimiter);
  }

  /*
  ** If we have a short body, return the entire body:
  */
  if (strlen($body) < $size) {
    return $body;
  }

  /*
  ** In some cases no delimiter has been specified (eg.
  ** when posting using the Blogger API) in which case
  ** we try to split at paragraph boundaries.
  */
  if ($length = strpos($body, "<br />", $size)) {
    return substr($body, 0, $length);
  }
  if ($length = strpos($body, "<br>", $size)) {
    return substr($body, 0, $length);
  }
  if ($length = strpos($body, "</p>", $size)) {
    return substr($body, 0, $length + 4);
  }
  if ($length = strpos($body, "\n", $size)) {
    return substr($body, 0, $length);
  }

  /*
  ** When even the first paragraph is too long, try to
  ** split at the end of the next sentence.
  */
  if ($length = strpos($body, ". ", $size)) {
    return substr($body, 0, $length + 1);
  }
  if ($length = strpos($body, "! ", $size)) {
    return substr($body, 0, $length + 1);
  }

  if ($length = strpos($body, "? ", $size)) {
    return substr($body, 0, $length + 1);
  }

  /*
  ** Nevermind, we split it the hard way ...
  */
  return substr($body, 0, $size);
}

/**
 * Return list of buttons to be shown in page-top navigation
 */
function taxonomy_context_get_buttons() {
  $buttons = array();
  static $context;
  if (!isset($context)) {
    $context = taxonomy_context_get_context();
  }
  if (variable_get("taxonomy_context_buttons_vocab", 0)) {
    $tids = taxonomy_context_vocab_first_child_terms(variable_get("taxonomy_context_buttons_vocab", 1));
    if (variable_get("taxonomy_context_buttons_with_home", 1)) {
      $buttons[0] = array();
      $buttons[0]["url"] = "index.php";
      $buttons[0]["name"] = t("Home");
      if ($_GET["q"] == variable_get("site_frontpage", "home")) {
        $buttons[0]["status"] = 1;
      }
      else {
        $buttons[0]["status"] = 0;
      }
      $buttons[0] = array2object($buttons[0]);
    }
    $t = 1;
    foreach ($tids as $tid) {
      $button = taxonomy_get_term($tid);
      $buttons[$t] = array();
      $buttons[$t]["url"] = url("taxonomy/term/" . $button->tid);
      $buttons[$t]["name"] = $button->name;
      if ($button->tid == $context->root_tid) {
        $buttons[$t]["status"] = 1;
      }
      else {
        $buttons[$t]["status"] = 0;
      }
      $buttons[$t] = array2object($buttons[$t]);
      if ($t == variable_get("taxonomy_context_buttons_vocab_length", 5)) {
        break;
      }
      $t++;
    }
  }
  return $buttons;
}

/**
 * Return themed output of navigational buttons
 */
function taxonomy_context_buttons() {
  $buttons = taxonomy_context_get_buttons();
  $output = "<ul class=\"button-list\">\n";
  foreach ($buttons as $button) {
    if (!$button->status) {
      $output .= theme("taxonomy_context_button", $button, "off");
    }
    else {
      $output .= theme("taxonomy_context_button", $button, "on");
    }
  }
  $output .= "</ul>\n";
  return $output;
}

/**
 * Return ids of the first children terms of the given vocabulary
 */
function taxonomy_context_vocab_first_child_terms($vid) {
  $terms = array();
  $result = db_query(db_rewrite_sql("SELECT n.tid FROM {term_hierarchy} t, {term_data} n WHERE t.tid = n.tid AND n.vid = %d AND t.parent = 0 ORDER BY n.weight, n.name"), $vid);
  while ($term = db_fetch_object($result)) {
    $terms[] = $term->tid;
  }
  return $terms;
}

/**
 * Return the tree hierarchy of the given node, and optionally
 * the nodes below the term
 */
function taxonomy_context_show_children($tid, $base = false) {
  static $context;
  if (!isset($context)) {
    $context = taxonomy_context_get_context();
  }
  $parents_str = "";
  $parents_obj = taxonomy_get_parents_all($context->tid);
  foreach ($parents_obj as $p) {
    $parents_str .= $p->tid . ",";
  }
  $parents = explode(",", $parents_str);

  $output = "<ul>\n";
  $children = taxonomy_context_term_children($tid);
  if ($children) {
    foreach ($children as $c) {
      $term = taxonomy_get_term($c);
       $params = array("title" => $term->description ? strip_tags(node_teaser($term->description)) : t("View this section"));
      if ($c == $context->tid) {
        $params["class"] = "active";
      }
      $link = l($term->name, "taxonomy/term/". $term->tid, $params);  

      if (in_array($c, $parents)) {
        $output .= "<li class=\"expanded\">" . $link . "\n";;
        $output .= taxonomy_context_show_children($c, false) . "</li>\n";
        $output .= "<ul>" . taxonomy_context_show_nodes($c) . "</ul>\n";
      }
      else {
        $output .= "<li class=\"collapsed\">" . $link . "</li>\n";
      }
    }
  }
  if ($base) {
    $output .= taxonomy_context_show_nodes($tid);
  }
  $output .= "</ul>\n";
  return $output;
}

/**
 * Return ids of children terms
 */
function taxonomy_context_term_children($tid) {
  $children = array();
  $result = db_query("SELECT t.tid, t.name FROM {term_hierarchy} h, {term_data} t WHERE h.tid = t.tid AND h.parent = %d ORDER BY t.weight, t.name", $tid);
  while ($term = db_fetch_object($result)) {
    $children[] = $term->tid;
  }
  if (count($children) > 0) {
    return $children;
  }
  else {
    return false;
  }
}

/**
 * Return a list of nodes below the given term
 */
function taxonomy_context_show_nodes($tid) {
  static $context;
  if (!isset($context)) {
    $context = taxonomy_context_get_context();
  }
  $output = "";
  $sql = "SELECT DISTINCT(n.nid), n.title, n.teaser " .
    "FROM {node} n " .
    "LEFT JOIN {term_node} r ON n.nid = r.nid " .
    "LEFT JOIN {users} u ON n.uid = u.uid " .
    " WHERE r.tid = %d " .
    "AND n.status = '1' ".
    (variable_get("taxonomy_context_use_promote", 1) ? " AND n.promote = '1' " : "") .
    " ORDER BY sticky DESC, n.created DESC";
  $result = db_query(db_rewrite_sql($sql), $tid);
  while ($node = db_fetch_object($result)) {
    $params = array("title" => strip_tags($node->teaser));
    if ($node->nid == $context->nid) {
      $params["class"] = "active";
    }
    $link = l($node->title, "node/". $node->nid, $params);
    $output .= "<li class=\"leaf\">" . $link . "</li>";
  }
  return $output;
}


/**
 * Hook implementations
 */

function taxonomy_context_block($op = "list", $delta = 0) {
  static $context;
  if (!isset($context)) {
    $context = taxonomy_context_get_context();
  }

  switch ($op) {

    case "list":
      $vocabularies = taxonomy_get_vocabularies();
      $i = 0;
      foreach ($vocabularies as $vocabulary) {
        $blocks[$i]["info"] = t('Context for %vocabulary', array('%vocabulary' => $vocabulary->name));
        $i++;
      }
      return $blocks;

    case "view":
      $vocabularies = taxonomy_get_vocabularies();
      foreach ($vocabularies as $vocabulary) {
        $vocabs[] = $vocabulary;
      }

      if ($vocabs[$delta]->vid != $context->vid) {
        return;
      }

      $block["subject"] = $vocabs[$delta]->name;
      $block["content"] = "<div class=\"menu\">" . taxonomy_context_show_children($context->root_tid, true) . "</div>\n";
      return $block;
  }
}
function taxonomy_context_help($section) {
  if (arg(0) == 'taxonomy') {
    $context = taxonomy_context_get_context();
  
    if (variable_get("taxonomy_context_show_term", 1) && $context->tid) {
      $output .= taxonomy_context_show_term($context->tid, $paged);
    }
    if (variable_get("taxonomy_context_show_subterms", 1) && !$paged) {
      $output .= taxonomy_context_show_subterms($context->tid, $context->vid);
    }
    return $output;
  }

  switch ($section) {

    case 'admin/help#taxonomy_context':
      $output .= t("<p>This module can be used to output title and description of the current taxonomy term plus child nodes of that term.</p>");
      break;
    case 'admin/modules#description':
      $output .= t("This module can be used to output title and description of the current taxonomy term plus child nodes of that term.  It also generates a context-sensitive menu block for each vocabulary.");
      break;
  }

  return $output;
}

function taxonomy_context_settings() {
  $output = "";
  $output .= form_select(
    t("Show term info"),
    "taxonomy_context_show_term", variable_get("taxonomy_context_show_term", 1),
    array(t("Disabled"), t("Enabled")),
    t("Show additional information about current term (from description)."));
  $output .= form_select(
    t("Show subterm info"),
    "taxonomy_context_show_subterms", variable_get("taxonomy_context_show_subterms", 1),
    array(t("Disabled"), t("Enabled")),
    t("Show listings of subterms (sub-categories) for current term."));
  $output .= form_select(
    t("Use style for term and subterm display"),
    "taxonomy_context_use_style", variable_get("taxonomy_context_use_style", 0),
    array(t("Disabled"), t("Enabled")),
    t("Include style declaration to clean up display of taxonomy info.  Disable this option if you wish to do this instead through editing theme .css files."));
  $output .= form_select(
    t("Only show \"promoted\" nodes in block."),
    "taxonomy_context_use_promote", variable_get("taxonomy_context_use_promote", 0),
    array(t("Disabled"), t("Enabled")),
    t("Enable this setting if you wish the context block to show only nodes that are promoted to the front page."));

  $vocabs = array(0 => "none");
  $vocabularies = taxonomy_get_vocabularies();
  foreach ($vocabularies as $v) {
    $vocabs[$v->vid] = t($v->name);
  }
  $output .= form_select(
    t("Vocabulary to show buttons from"),
    "taxonomy_context_buttons_vocab", variable_get("taxonomy_context_buttons_vocab", 0),
    $vocabs,
    t("ID of Vocabulary that you wish to use for page-top navigation buttons (displayed in some themes, e.g, gworks).  Select \"none\" if you do not wish to show buttons."));
  $output .= form_select(
    t("Buttons include Home"),
    "taxonomy_context_buttons_with_home", variable_get("taxonomy_context_buttons_with_home", 1),
    array(t("Disabled"), t("Enabled")),
    t("Whether to include a link to Home in the button list"));
  $output .= form_select(
    t("Number of terms to show"),
    "taxonomy_context_buttons_vocab_length", variable_get("taxonomy_context_buttons_vocab_length", 5),
    array(3 => 3, 4, 5, 6, 7, 8, 9, 10, -1 => t("unlimited")),
    t("The number of buttons to be listed in page-top navigation buttons."));
    foreach (node_list() as $type) {
      $nodetypes[$type] = node_invoke($type, 'node_name');
    }
    $output .= form_select(t('Breadcrumb content types'), 'taxonomy_context_breadcrumb_node_types', variable_get('taxonomy_context_breadcrumb_node_types', array('story','page','book')), $nodetypes, t('Which content types should include terms in breadcrumbs?'), 0, 1);
  return $output;
}

function taxonomy_context_access($op, $node) {
  if ($op == "view") {
    return $node->status;
  }
}


/**
 * Themed output controlling functions
 */

function theme_taxonomy_context_button($button, $state = "off") {
  $output = "<li class=\"button\"><a href=\"" . $button->url . "\" class=\"button-$state\">" . $button->name . "</a></li>\n";
  return $output;
}

function theme_taxonomy_context_term($term, $type = "term") {
  $output = "";
  $output .= "<div class=\"$type-container\">\n";
  if ($term->image != "") {
    $output .= "  <div class=\"$type-image\">" . $term->image . "</div>\n";
    $output .= "  <div class=\"$type imaged\">\n";
  }
  else {
    $output .= "  <div class=\"$type\">\n";
  }
  if ($type != "term") {
    $output .= "   <h2 class=\"title\">" . l($term->name, "taxonomy/term/" . $term->tid) . "</h2>\n";
  }
  $output .= "   <div class=\"description\">" . $term->description . "</div>\n";
  $output .= "   <div class=\"links\">" . theme("links", $term->links) . "</div>\n";
  $output .= "  </div>\n";
  $output .= "</div>\n";
  $output .= "<div class=\"clearit\"></div>\n";
  return $output;
}
?>