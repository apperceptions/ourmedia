<?php


/**

 * Implementation of hook_settings().

 */

function communitywatch_settings()
{
$output = form_textfield(t('IA Email'), 'communitywatch_email',variable_get('communitywatch_email', 'info@ourmedia.org'), 50, 255,
    t('Internet Archive E-mail Address'));
$output .= form_textfield(t('IA Password'), 'communitywatch_password',variable_get('communitywatch_password', ''), 50, 255,
    t('Internet Archive Password'));

return $output;
}


/**

 * Implementation of hook_nodeapi().

 */

function communitywatch_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  global $user;
  switch ($op) 
	{
    	case 'insert':
      	if (substr($node->type,-5) == 'media')
		{
			db_query("INSERT INTO {communitywatch_curate} (nid, status) VALUES (%d,1)", $node->nid);
		}
		break;
		case 'delete':
      		db_query('DELETE FROM {communitywatch_curate} WHERE nid = %d', $node->nid);
		break;
	}

}

function communitywatch_formatname($object)
{

  if ($object->uid && $object->name) {
    // Shorten the name when it is too long or it will break many tables.
    if (strlen($object->name) > 20) {
      $name = truncate_utf8($object->name, 15) .'...';
    }
    else {
      $name = $object->name;
    }

    if (user_access('access user profiles')) {
      $output = l($name, 'admin/communitywatch/users/'. $object->uid, array('title' => t('View user media.')));
    }
    else {
      $output = $name;
    }
  }
  else if ($object->name) {
    // Sometimes modules display content composed by people who are
    // not registered members of the site (e.g. mailing list or news
    // aggregator modules). This clause enables modules to display
    // the true author of the content.
    if ($object->homepage) {
      $output = '<a href="'. $object->homepage .'">'. $object->name .'</a>';
    }
    else {
      $output = $object->name;
    }

    $output .= ' ('. t('not verified') .')';
  }
  else {
    $output = variable_get('anonymous', 'Anonymous');
  }

  return $output; 
}

function communitywatch_makedark($nid)
{

  $identifier = db_result(db_query("SELECT ia_identifier FROM {ia} WHERE nid='%d'", $nid));
  if (!$identifier) {
	return;
  }

$username = variable_get('communitywatch_email', 'info@ourmedia.org');
$password = variable_get('communitywatch_password', '');

$headers = array();
$data = "username=$username&password=$password";
$result = drupal_http_request("http://www.archive.org/login.php",$headers,"POST",$data);

if (isset($result->headers['Set-Cookie'])) {
$headers['Cookie'] = $result->headers['Set-Cookie'];	

$req = drupal_http_request("http://www.archive.org/item-mgr.php?identifier=$identifier&admin=make_dark",$headers,"GET");

}

}


function communitywatch_admin_users($uid=NULL)
{

$edit = $_GET['edit'];
if (is_numeric($edit['userid'])) {
drupal_goto("admin/communitywatch/users/".$edit['userid']);
}

if (!$uid) 
{
	$output = "Enter the user's ID to view a list of their media, then take the appropriate action.";
  	$output .= form_textfield("User ID", 'userid', '', 30, 400);
  	$output .= form_submit('Submit');
  	$output = form($output, 'get');
} else {
$result = db_query("SELECT n.*, u.name, u.uid FROM {node} n INNER JOIN {users} u ON n.uid = u.uid WHERE n.uid='$uid' AND n.type LIKE '%media';");

  $operations = array(
    'approve' =>   array(t('Approve the selected posts'), 'UPDATE {node} SET status = 1, moderate = 0 WHERE nid = %d'),
    'unpublish' => array(t('Unpublish the selected posts'), 'UPDATE {node} SET status = 0 WHERE nid = %d'),
    'delete' =>    array(t('Delete the selected posts'), '')
  );

  $options = array();
  foreach ($operations as $key => $value) {
    $options[$key] = $value[0];
  }

  $disabled = !db_num_rows($result);


  $form = form_select(NULL, 'operation', 'approve', $options, NULL, ($disabled ? 'disabled="disabled"' : ''));
  $form .= form_submit(t('Update'), 'op', ($disabled ? array('disabled' => 'disabled') : array()));
  $form .= form_hidden('userid', $uid);

  $output .= form_group(t('Update options'), "<div class=\"container-inline\">$form</div>");

  // Overview table:
  $header = array(NULL, t('Title'), t('Type'), t('Author'), t('Status'), t('Operations'));
  $rows = array();

    if (db_num_rows($result) > 0) 
	{

  		while ($objuser = db_fetch_object($result)) 
		{
    		$rows[] = array(form_checkbox(NULL, 'nodes]['. $objuser->nid, 1, 0),l($objuser->title, 'node/'. $objuser->nid) .' '. theme('mark', node_mark($objuser->nid, $objuser->changed)),node_invoke($objuser, 'node_name'),format_name($objuser),($objuser->status ? t('published') : t('not published')),l(t('edit'), 'node/'. $objuser->nid .'/edit'));
  		}

	}

  if (!$rows) 
	{
    	$rows[] = array(array('data' => t('No posts available.'), 'colspan' => '6'));
  	}

  $output .= theme('table', $header, $rows);
  $output = form($output, 'post', url('admin/communitywatch/action'));

}

 print theme('page', $output);

}

function communitywatch_admin_action()
{
$edit = $_POST['edit'];
$uid = $edit['userid'];

	switch($edit['operation'])
	{
		default:
		drupal_goto("admin/communitywatch");
		break;
		case "ok":
        	foreach ($edit['nodes'] as $nid => $value) {
          		if ($value) 
				{
					db_query("UPDATE {node} SET status = 1, moderate = 0 WHERE nid = %d",$nid);
					db_query("DELETE FROM {communitywatch_curate} WHERE nid = %d",$nid);
				}
			}
		drupal_set_message("Items okayed");
		drupal_goto("admin/communitywatch");
		case "flag":
			if ($edit['confirm']) 
			{
        		foreach ($edit['nodes'] as $nid => $value) 
				{
          			if ($value) 
					{
						communitywatch_makedark($nid);
						db_query("UPDATE {communitywatch_curate} SET status = 0 WHERE nid = %d",$nid);
						db_query("UPDATE {node} SET status = 0 WHERE nid = %d",$nid);
					}
				}
				drupal_set_message("User(s) notified and item(s) unpublished and darkened.");
				drupal_goto("admin/communitywatch");
			} else 
			{
          		$extra = '<ul>';
          		foreach ($edit['nodes'] as $nid => $value) 
				{
            		if ($value) 
					{
              			$title = db_result(db_query('SELECT title FROM {node} WHERE nid = %d', $nid));
              			$extra .= '<li>'. form_hidden('nodes]['. $nid, 1) . check_plain($title) .'</li>';
            		}
          		}

          		$extra .= '</ul>';
          		$extra .= form_hidden('operation', 'flag');

				$output = theme('confirm',t('Are you sure you want to notify and unpublish these items?'),'admin/communitywatch',t('This action cannot be undone.'),t('Delete all'),t('Cancel'),$extra);
 				print theme('page', $output);
			}
		break;
		case "approve":
        	foreach ($edit['nodes'] as $nid => $value) {
          		if ($value) 
				{
					db_query("UPDATE {node} SET status = 1, moderate = 0 WHERE nid = %d",$nid);
				}
			}
		drupal_set_message("Items published");
		drupal_goto("admin/communitywatch/users/$uid");
		break;
		case "unpublish":
        	foreach ($edit['nodes'] as $nid => $value) {
          		if ($value) 
				{
					db_query("UPDATE {node} SET status = 0 WHERE nid = %d",$nid);
				}
			}
		drupal_set_message("Items unpublished");
		drupal_goto("admin/communitywatch/users/$uid");
		break;
		case "delete":
			if ($edit['confirm']) 
			{
        		foreach ($edit['nodes'] as $nid => $value) 
				{
          			if ($value) 
					{
				        node_delete(array('nid' => $nid, 'confirm' => 1));
					}
				}
				drupal_set_message("Items deleted");
				drupal_goto("admin/communitywatch/users/$uid");
			} else 
			{
          		$extra = '<ul>';
          		foreach ($edit['nodes'] as $nid => $value) 
				{
            		if ($value) 
					{
              			$title = db_result(db_query('SELECT title FROM {node} WHERE nid = %d', $nid));
              			$extra .= '<li>'. form_hidden('nodes]['. $nid, 1) . check_plain($title) .'</li>';
            		}
          		}

          		$extra .= '</ul>';
          		$extra .= form_hidden('operation', 'delete');
				$extra .= form_hidden('userid', $uid);

				$output = theme('confirm',t('Are you sure you want to delete these items?'),'admin/communitywatch/user/$uid',t('This action cannot be undone.'),t('Delete all'),t('Cancel'),$extra);
 				print theme('page', $output);
			}
		break;
	}
}

function communitywatch_admin()
{

$sql = "SELECT nid FROM {communitywatch_curate} WHERE status='1' ORDER BY nid DESC";
$result = pager_query($sql, 20);

    while ($onenode = db_fetch_array($result)) {
      $nodes[] = $onenode['nid'];
    }

  $operations = array(
    'ok' =>   array(t('OK the selected posts')),
    'flag' => array(t('Unpublish and darken the selected posts'))
  );

  $options = array();
  foreach ($operations as $key => $value) {
    $options[$key] = $value[0];
  }

  $disabled = !db_num_rows($result);

  $form = form_select(NULL, 'operation', 'approve', $options, NULL, ($disabled ? 'disabled="disabled"' : ''));
  $form .= form_submit(t('Update'), 'op', ($disabled ? array('disabled' => 'disabled') : array()));
  $form .= form_hidden('userid', $uid);

  $output .= form_group(t('Update options'), "<div class=\"container-inline\">$form</div>");

  // Overview table:
  $header = array(NULL, t('Title'), t('Type'), t('Author'), t('Date'), t('Status'), t('Operations'));
  $rows = array();


	if (!$disabled) {
	  $sql = 'SELECT n.*, u.name, u.uid FROM {node} n INNER JOIN {users} u ON n.uid = u.uid WHERE nid IN (%s) ORDER BY nid DESC';
	  $result = db_query($sql, implode(', ', $nodes));
	
	  while ($objnode = db_fetch_object($result)) 
		{
	    	$rows[] = array(form_checkbox(NULL, 'nodes]['. $objnode->nid, 1, 0),l($objnode->title, 'node/'. $objnode->nid) .' '. theme('mark', node_mark($objnode->nid, $objnode->changed)),node_invoke($objnode, 'node_name'),communitywatch_formatname($objnode),format_date($objnode->created, 'small'),($objnode->status ? t('published') : t('not published')),l(t('edit'), 'node/'. $objnode->nid .'/edit'));
		}
	}

  if (!$rows) 
	{
    	$rows[] = array(array('data' => t('No posts available.'), 'colspan' => '6'));
  	}

  $pager = theme('pager', NULL, 20, 0, tablesort_pager());
  if (!empty($pager)) {
    $rows[] = array(array('data' => $pager, 'colspan' => 6));
  }

  $output .= theme('table', $header, $rows);
  $output = form($output, 'post', url('admin/communitywatch/action'));
 
print theme('page', $output);

}
 

/**

 * Implementation of hook_help().

 */

function communitywatch_help($section) {

  switch ($section) {

    case 'admin/modules#description':

      return t('Copyright infringement watch tool');

  }

}

/**

 * Implementation of hook_menu().

 */

function communitywatch_menu($may_cache) {

  $items = array();
  $access = user_access('administer nodes');

if ($may_cache) {


// Main Admin Menu Item
   $items[] = array('path' => 'admin/communitywatch', 'title' => t('community watch'),

      'callback' => 'communitywatch_admin',

      'access' => $access);

// Top Level Tabs
   $items[] = array('path' => 'admin/communitywatch/manage', 'title' => t('manage'),

      'type' => MENU_DEFAULT_LOCAL_TASK,

	  'weight' => -10);

   $items[] = array('path' => 'admin/communitywatch/users', 'title' => t('users'),

      'callback' => 'communitywatch_admin_users',

      'access' => $access,

      'type' => MENU_LOCAL_TASK,

	  'weight' => 10);

// Callbacks

   $items[] = array('path' => 'admin/communitywatch/action', 'title' => '',

      'callback' => 'communitywatch_admin_action',

      'access' => $access,

      'type' => MENU_CALLBACK);

	}

  return $items;

}

?>